# -*- coding: utf-8 -*-
"""MOVIEBOT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X0Dr2h3O1ziKW67Et0fJ7198ptiDew1y

Importing the dependencies
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import random
import string
import nltk
import warnings
warnings.filterwarnings('ignore')
from sklearn.feature_extraction.text import CountVectorizer
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import r2_score

nltk.download ('punkt',quiet=True)

"""Data Collection and Pre-Processing"""

# loading the data from the csv file to apandas dataframe

movies_data = pd.read_csv('/content/drive/MyDrive/csv/movies.csv')

# printing the first 5 rows of the dataframe

movies_data.head()

import matplotlib.pyplot as plt
x=movies_data .runtime
y=movies_data.popularity
plt.xlabel('runtime')
plt.ylabel('popularity')
plt.scatter(x,y)

# number of rows and columns in the data frame

movies_data.shape

# selecting the relevant features for recommendation

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

# replacing the null valuess with null string

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

# combining all the 5 selected features

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

# converting the text data to feature vectors

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

# getting the similarity scores using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

"""Getting the movie name from the user"""

# getting the movie name from the user

movie_name = input(' Enter your favourite movie name : ')

# creating a list with all the movie names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

# finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

# finding the index of the movie with title

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

# getting a list of similar movies

similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

# sorting the movies based on their similarity score

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

"""Movie Recommendation Sytem"""

print('ROBO:your movie assistant here!')
print('use "suggest" tag for movie recommendation')
print('use "review" tag for movie review')
m=['suggest', ' suggest me a movie','what movie shall i watch']
i=['review','rating']
n=['bye','exit']
GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):
   for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)
flag=True

while(flag==True):
    user_input=input()
    user_input=user_input.lower()
    if(user_input!='bye'):
        if(user_input=='thanks' or user_input=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
          if(greeting(user_input)!=None):
                print("ROBO: "+greeting(user_input))
          else:
            if user_input.lower() in m:
               movie_name = input('ROBO: Enter the movie you last watched : ')

               list_of_all_titles = movies_data['title'].tolist()

               find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

               close_match = find_close_match[0]

               index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

               similarity_score = list(enumerate(similarity[index_of_the_movie]))

               sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

               print('ROBO:Movies suggested for you : \n')

               i = 1

               for movie in sorted_similar_movies:
                 index = movie[0]
                 title_from_index = movies_data[movies_data.index==index]['title'].values[0]
                 VOTES=movies_data[movies_data.index==index]['vote_average'].values[0]
                 if (i<30):
                  print(i, '.',title_from_index,'-',VOTES)
                  i+=1
            else:
              if (user_input.lower()=="review"):
                  movie_name = input('ROBO: Enter the movie to be reviewed: ')
                  list_of_all_titles = movies_data['title'].tolist()

                  find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

                  close_match = find_close_match[0]

                  index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

                  similarity_score = list(enumerate(similarity[index_of_the_movie]))

                  sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

                  print('Movie Review : \n')

                  i = 1

                  for movie in sorted_similar_movies:
                    index = movie[0]
                    title_from_index = movies_data[movies_data.index==index]['title'].values[0]
                    VOTES=movies_data[movies_data.index==index]['vote_average'].values[0]
                    budget=movies_data[movies_data.index==index]['budget'].values[0]
                    genre=movies_data[movies_data.index==index]['genres'].values[0]
                    cast=movies_data[movies_data.index==index]['cast'].values[0]
                    director=movies_data[movies_data.index==index]['director'].values[0]
                    overview=movies_data[movies_data.index==index]['overview'].values[0]

                    if (i==1):
                     print("TITLE-",title_from_index)
                     print("RATING-",VOTES)
                     print("BUDGET-",budget)
                     print("GENRE-",genre)
                     print("CAST-",cast)
                     print("DIRECTOR-",director)
                     print("OVERVIEW-",overview)
                     i+=1
    else:
               flag=False
               print("ROBO: Bye! take care..")

